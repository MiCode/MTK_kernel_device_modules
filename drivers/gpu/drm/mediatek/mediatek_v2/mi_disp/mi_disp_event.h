#ifndef _MI_DISP_EVENT_H_
#define _MI_DISP_EVENT_H_

enum disp_mievent_type {
	MI_EVENT_PRI_PANEL_REG_ESD = 911001001,
	MI_EVENT_PRI_PANEL_IRQ_ESD,
	MI_EVENT_PRI_PLATFORM_ESD,
	MI_EVENT_DSI_ERROR,
	MI_EVENT_PANEL_HW_RESOURCE_GET_FAILED,
	MI_EVENT_PANEL_RECOGNIZE_ERR,
	MI_EVENT_PANEL_WP_READ_FAILED,
	MI_EVENT_PANEL_UNDERRUN,
	MI_EVENT_ALL_ZERO_PCC,
	MI_EVENT_INVALID_FRAME_PENDING,
	MI_EVENT_CMD_RECEIVE_FAILED,
	MI_EVENT_CMD_SEND_FAILED,
	MI_EVENT_SMMU_FAULT,
	MI_EVENT_FENCE_SIGNAL_ERR,
	MI_EVENT_CLOCK_ERR,
	MI_EVENT_DMA_BUF_ALLOCATE_FAILED = 911001016,
	MI_EVENT_BACKLIGHT_ZERO = 911001019,
	MI_EVENT_SEC_PANEL_REG_ESD = 911001101,
	MI_EVENT_SEC_PANEL_IRQ_ESD,
	MI_EVENT_SEC_PLATFORM_ESD,
	MI_EVENT_PANEL_HARDWARE_ERR = 911001999,
	MI_EVENT_PINGPONG_TIMEOUT = 911002001,
	MI_EVENT_DMA_CMD_TIMEOUT = 911002002,
	MI_EVENT_RD_PTR_TIMEOUT = 911002007,
	MI_EVENT_WR_PTR_TIMEOUT = 911002008,
	MI_EVENT_DP_READ_EDID_FAIL = 911003001,
	MI_EVENT_CMDQ_TIMEOUT = 911101001,
	MI_EVENT_MAX_EVENT_TYPE,
};

enum disp_mievent_recovery_type {
	MI_EVENT_PRI_PANEL_REG_ESD_RECOVERY = 811001001,
	MI_EVENT_PRI_PANEL_IRQ_ESD_RECOVERY,
	MI_EVENT_PRI_PLATFORM_ESD_RECOVERY,
	MI_EVENT_SEC_PANEL_REG_ESD_RECOVERY,
	MI_EVENT_SEC_PANEL_IRQ_ESD_RECOVERY,
	MI_EVENT_SEC_PLATFORM_ESD_RECOVERY,
	MI_EVENT_MAX_EVENT_RECOVERY_TYPE,
};

extern unsigned int ESD_TYPE;

struct mi_event_info{
	int event_type;
	int event_type_param1;
	int event_type_param2;
};

#define MI_EVENT_ESD_COUNT_MAX 100 /* number of esd counted */
#define MI_EVENT_CMD_COUNT_MAX 1000 /* number of cmd receive/send failed counted */
#define MI_EVENT_ESD_TIMEOUT 60 /* the statistical unit is minutes */

void mi_disp_mievent_str(unsigned int event_type);
void mi_disp_mievent_int(int disp_id,struct mi_event_info *mievent);
void mi_disp_mievent_recovery(unsigned int event_type);

#endif /* _MI_DISP_EVENT_H_ */
