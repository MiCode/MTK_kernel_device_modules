/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (c) 2019 MediaTek Inc.
 */

#ifndef __GED_EB_H__
#define __GED_EB_H__

#include <linux/types.h>
#include "ged_type.h"
#include "ged_dvfs.h"

/**************************************************
 * GPU FAST DVFS Log Setting
 **************************************************/
#define GED_FAST_DVFS_TAG "[GPU/FDVFS]"
#define GPUFDVFS_LOGE(fmt, args...) \
	pr_info(GED_FAST_DVFS_TAG"[ERROR]@%s: "fmt"\n", __func__, ##args)
#define GPUFDVFS_LOGW(fmt, args...) \
	pr_debug(GED_FAST_DVFS_TAG"[WARN]@%s: "fmt"\n", __func__, ##args)
#define GPUFDVFS_LOGI(fmt, args...) \
	pr_info(GED_FAST_DVFS_TAG"[INFO]@%s: "fmt"\n", __func__, ##args)
#define GPUFDVFS_LOGD(fmt, args...) \
	pr_debug(GED_FAST_DVFS_TAG"[DEBUG]@%s: "fmt"\n", __func__, ##args)


/**************************************************
 * GPU FAST DVFS SYSRAM Setting
 **************************************************/
#define FASTDVFS_COUNTER_FIRST_ENTRY 48   // use to offset array
#define FASTDVFS_FEEDBACK_INFO_FIRST_ENTRY 88  // use to offset array

#define SYSRAM_LOG_SIZE sizeof(int)
#define COMMON_LOW_BIT		(0)
#define COMMON_MID_BIT		(8)
#define COMMON_HIGH_BIT		(16)

// FDVFS SYSRAM space is allocated after QOSc & SLC, 48~77
enum gpu_fastdvfs_counter {
	FASTDVFS_GPU_RISKY_BQ_STATE = FASTDVFS_COUNTER_FIRST_ENTRY,
	FASTDVFS_GPU_RISKY_COMPLETE_TIME,
	FASTDVFS_GPU_RISKY_UNCOMPLETE_TIME,
	FASTDVFS_GPU_RISKY_COMPLETE_TARGET_TIME,
	FASTDVFS_GPU_RISKY_UNCOMPLETE_TARGET_TIME,
	FASTDVFS_GPU_RISKY_COMPLETE_COUNT,
	FASTDVFS_GPU_FB_QUEUE_TIMESTAMP,
	FASTDVFS_GPU_FB_DONE_TIMESTAMP,
	FASTDVFS_GPU_FB_TARGET_HD,
	FASTDVFS_GPU_TARGET_FPS,
	FASTDVFS_GPU_EB_DESIRE_FREQ_ID,
	FASTDVFS_GPU_EB_DESIRE_POLICY_STATE,
	FASTDVFS_GPU_EB_DEBUG_READ_POINTER,
	FASTDVFS_GPU_EB_DEBUG_WRITE_POINTER,
	FASTDVFS_GPU_EB_DCS_CORE_NUM,
	FASTDVFS_GPU_EB_VIRTUAL_OPP,
	FASTDVFS_GPU_EB_UNCOMPLETE_COUNT,
	FASTDVFS_GPU_FB_FALLBACK_RESET_COUNT,
	FASTDVFS_COUNTER_LAST_COMMIT_IDX = 66,
	FASTDVFS_COUNTER_LAST_COMMIT_TOP_IDX,
	FASTDVFS_GPU_FB_TARGET_SOC_TIMER_HI,
	FASTDVFS_GPU_FB_TARGET_SOC_TIMER_LO,
	FASTDVFS_GPU_RISKY_UNCOMPLETE_SOC_TIMER_HI,
	FASTDVFS_GPU_RISKY_UNCOMPLETE_SOC_TIMER_LO,
	FASTDVFS_GPU_EB_USE_UNCOMPLETE_SOC_TIMER_HI,
	FASTDVFS_GPU_EB_USE_UNCOMPLETE_SOC_TIMER_LO,
	FASTDVFS_GPU_EB_USE_FB_SOC_TIMER_HI,
	FASTDVFS_GPU_EB_USE_FB_SOC_TIMER_LO,
	FASTDVFS_GPU_EB_ASYNC_RATIO_ENABLE = 77,
	FASTDVFS_GPU_PWR_HINT = 78,
	FASTDVFS_GPU_EB_LOG_DUMP_TOP_FREQ = 79,
	FASTDVFS_GPU_EB_LOG_DUMP_STACK_FREQ = 89,			// real stack, virtual stack
	FASTDVFS_GPU_EB_LOG_DUMP_LOADING1 = 99,			// GPU,MCU,ITER,AVG
	FASTDVFS_GPU_EB_LOG_DUMP_LOADING2 = 109,			// reserve
	FASTDVFS_GPU_EB_LOG_DUMP_POWER_STATE = 119,
	FASTDVFS_GPU_EB_LOG_DUMP_DEBUG_COUNT = 129,
	FASTDVFS_GPU_EB_LOG_DUMP_SOC_TIMER_HI = 139,
	FASTDVFS_GPU_EB_LOG_DUMP_SOC_TIMER_LO = 149,
	FASTDVFS_GPU_EB_LOG_DUMP_GPU_TIME = 159,
	FASTDVFS_GPU_EB_LOG_DUMP_OPP = 169,			// cur, target
	FASTDVFS_GPU_EB_LOG_DUMP_BOUND = 179,
	FASTDVFS_GPU_EB_LOG_DUMP_MARGIN = 189,
	FASTDVFS_GPU_EB_STABLE_LB = 204,
	FASTDVFS_GPU_EB_P_MODE_STATUS = 205,
	FASTDVFS_GPU_EB_SMALL_FRAME  = 206,
	FASTDVFS_GPU_EB_2K_SIZE = 207,
	FASTDVFS_GPU_EB_26M_REPLACE  = 208,
	FASTDVFS_GPU_EB_LOADING_MODE                = 209,
	FASTDVFS_GPU_EB_API_BOOST = 210,
	FASTDVFS_GPU_EB_ASYNC_PARAM,
	FASTDVFS_GPU_EB_DCS_ENABLE,
	FASTDVFS_GPU_EB_USE_TARGET_GPU_HD,
	FASTDVFS_GPU_EB_USE_ITER_U_MCU_LOADING = 215,
	FASTDVFS_GPU_EB_USE_GPU_LOADING = 216,
	FASTDVFS_GPU_EB_USE_MCU_LOADING = 217,
	FASTDVFS_GPU_EB_USE_ITER_LOADING = 218,
	FASTDVFS_GPU_EB_USE_DELTA_TIME = 219,
	FASTDVFS_GPU_EB_USE_APPLY_LB_ASYNC = 220,
	FASTDVFS_GPU_EB_USE_MAX_IS_MCU,
	FASTDVFS_GPU_EB_USE_AVG_MCU,
	FASTDVFS_GPU_EB_USE_MAX_MCU,
	FASTDVFS_GPU_EB_USE_AVG_MCU_TH,
	FASTDVFS_GPU_EB_USE_MAX_MCU_TH,
	FASTDVFS_GPU_EB_USE_ASYNC_GPU_ACTIVE,
	FASTDVFS_GPU_EB_USE_ASYNC_ITER,
	FASTDVFS_GPU_EB_USE_ASYNC_COMPUTE,
	FASTDVFS_GPU_EB_USE_ASYNC_L2EXT,
	FASTDVFS_GPU_EB_USE_ASYNC_IRQ,
	FASTDVFS_GPU_EB_USE_ASYNC_MCU,
	FASTDVFS_GPU_EB_USE_PERF_IMPROVE,
	FASTDVFS_GPU_EB_USE_ADJUST_RATIO,
	FASTDVFS_GPU_EB_USE_ASYNC_OPP_DIFF,
	FASTDVFS_GPU_EB_GED_PRESERVE = 235,
	FASTDVFS_GPU_EB_GED_KERNEL_COMMIT_SOC_TIMER_HI = 236,
	FASTDVFS_GPU_EB_GED_KERNEL_COMMIT_SOC_TIMER_LO = 237,
	FASTDVFS_GPU_EB_GED_KERNEL_COMMIT_OPP = 238,
	FASTDVFS_GPU_EB_USE_POLICY_STATE = 239,
	FASTDVFS_GPU_EB_USE_T_GPU,
	FASTDVFS_GPU_EB_USE_TARGET_OPP,
	FASTDVFS_GPU_EB_USE_TARGET_GPU,
	FASTDVFS_GPU_EB_USE_COMPLETE_GPU,
	FASTDVFS_GPU_EB_USE_UNCOMPOLETE_GPU,
	FASTDVFS_GPU_EB_USE_MARGIN,
	FASTDVFS_GPU_EB_USE_MARGIN_CEIL,
	FASTDVFS_GPU_EB_USE_MARGIN_FLOOR,
	FASTDVFS_GPU_EB_USE_BOUND_LOW,
	FASTDVFS_GPU_EB_USE_BOUND_HIGH,
	FASTDVFS_GPU_EB_USE_BOUND_ULTRA_LOW,
	FASTDVFS_GPU_EB_USE_BOUND_ULTRA_HIGH,
	FASTDVFS_GPU_EB_USE_LOADING,
	FASTDVFS_GPU_EB_USE_FB_OVERDUE_TIME,
	FASTDVFS_GPU_EB_USE_DEBUG_COUNT,
	FASTDVFS_GPU_EB_LOG_DUMP_FB_MONITOR = 256,
	FASTDVFS_GPU_EB_LOG_DUMP_UN_TIME = 266,
	FASTDVFS_GPU_EB_LOG_DUMP_COM_TIME = 276,
	FASTDVFS_GPU_EB_LOG_DUMP_UN_TIME_TARGET = 286,
	FASTDVFS_GPU_EB_LOG_DUMP_COM_TIME_TARGET = 296,
	FASTDVFS_GPU_EB_LOG_DUMP_TIME_TARGET = 306,
	FASTDVFS_GPU_EB_LOG_DUMP_DELTA_TIME = 316,
	FASTDVFS_GPU_EB_LOG_DUMP_FB_TARGET = 326,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_GPU = 336,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_ITER = 346,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_COMPUTE = 356,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_L2EXT = 366,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_IRQ = 376,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_MCU = 386,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_INDEX1 = 396,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_INDEX2 = 406,
	FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_INDEX3 = 416,
	FASTDVFS_GPU_EB_CMD_FALLBACK_INTERVAL = 426,
	FASTDVFS_GPU_EB_CMD_FALLBACK_WIN_SIZE = 427,
	FASTDVFS_GPU_EB_CMD_LOADING_BASE_DVFS_STEP = 428,
	FASTDVFS_GPU_EB_CMD_LOADING_STRIDE_SIZE = 429,
	FASTDVFS_GPU_EB_CMD_LOADING_WIN_SIZE = 430,
	FASTDVFS_GPU_EB_CMD_TIMER_BASE_DVFS_MARGIN = 431,
	FASTDVFS_GPU_EB_LOG_DUMP_PREOC = 432,
	NR_FASTDVFS_COUNTER = 442,
};

/* 6989 0x117800~0x117C00 */
#define FASTDVFS_POWERMODEL_SYSRAM_BASE 0x117800U

#define SYSRAM_GPU_RISKY_BQ_STATE \
( \
(FASTDVFS_GPU_RISKY_BQ_STATE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_RISKY_COMPLETE_TIME \
( \
(FASTDVFS_GPU_RISKY_COMPLETE_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_RISKY_UNCOMPLETE_TIME \
( \
(FASTDVFS_GPU_RISKY_UNCOMPLETE_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_RISKY_COMPLETE_TARGET_TIME \
( \
(FASTDVFS_GPU_RISKY_COMPLETE_TARGET_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_RISKY_UNCOMPLETE_TARGET_TIME \
( \
(FASTDVFS_GPU_RISKY_UNCOMPLETE_TARGET_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_RISKY_COMPLETE_COUNT \
( \
(FASTDVFS_GPU_RISKY_COMPLETE_COUNT*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_FB_QUEUE_TIMESTAMP \
( \
(FASTDVFS_GPU_FB_QUEUE_TIMESTAMP*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_FB_DONE_TIMESTAMP \
( \
(FASTDVFS_GPU_FB_DONE_TIMESTAMP*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_FB_TARGET_HD \
( \
(FASTDVFS_GPU_FB_TARGET_HD*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_TARGET_FPS \
( \
(FASTDVFS_GPU_TARGET_FPS*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_DESIRE_FREQ_ID \
( \
(FASTDVFS_GPU_EB_DESIRE_FREQ_ID*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_DESIRE_POLICY_STATE \
( \
(FASTDVFS_GPU_EB_DESIRE_POLICY_STATE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_GPU_EB_DEBUG_READ_POINTER \
( \
(FASTDVFS_GPU_EB_DEBUG_READ_POINTER*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_GPU_EB_DEBUG_WRITE_POINTER \
( \
(FASTDVFS_GPU_EB_DEBUG_WRITE_POINTER*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_DCS_CORE_NUM \
( \
(FASTDVFS_GPU_EB_DCS_CORE_NUM*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_VIRTUAL_OPP \
( \
(FASTDVFS_GPU_EB_VIRTUAL_OPP *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_UNCOMPLETE_COUNT \
( \
(FASTDVFS_GPU_EB_UNCOMPLETE_COUNT *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_FB_FALLBACK_RESET_COUNT \
( \
(FASTDVFS_GPU_FB_FALLBACK_RESET_COUNT *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_LAST_COMMIT_IDX \
( \
(FASTDVFS_COUNTER_LAST_COMMIT_IDX*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_LAST_COMMIT_TOP_IDX \
( \
(FASTDVFS_COUNTER_LAST_COMMIT_TOP_IDX*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_FB_TARGET_SOC_TIMER_HI \
( \
(FASTDVFS_GPU_FB_TARGET_SOC_TIMER_HI*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_FB_TARGET_SOC_TIMER_LO \
( \
(FASTDVFS_GPU_FB_TARGET_SOC_TIMER_LO*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_RISKY_UNCOMPLETE_SOC_TIMER_HI \
( \
(FASTDVFS_GPU_RISKY_UNCOMPLETE_SOC_TIMER_HI*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_RISKY_UNCOMPLETE_SOC_TIMER_LO \
( \
(FASTDVFS_GPU_RISKY_UNCOMPLETE_SOC_TIMER_LO*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_UNCOMPLETE_SOC_TIMER_HI \
( \
(FASTDVFS_GPU_EB_USE_UNCOMPLETE_SOC_TIMER_HI*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_UNCOMPLETE_SOC_TIMER_LO \
( \
(FASTDVFS_GPU_EB_USE_UNCOMPLETE_SOC_TIMER_LO*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_FB_SOC_TIMER_HI \
( \
(FASTDVFS_GPU_EB_USE_FB_SOC_TIMER_HI*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_FB_SOC_TIMER_LO \
( \
(FASTDVFS_GPU_EB_USE_FB_SOC_TIMER_LO*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_ASYNC_RATIO_ENABLE  \
(									   \
(FASTDVFS_GPU_EB_ASYNC_RATIO_ENABLE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_PWR_HINT \
( \
(FASTDVFS_GPU_PWR_HINT*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_TOP_FREQ               \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_TOP_FREQ*SYSRAM_LOG_SIZE)	  \
)
#define SYSRAM_GPU_EB_LOG_DUMP_STACK_FREQ               \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_STACK_FREQ*SYSRAM_LOG_SIZE)   \
)
#define SYSRAM_GPU_EB_LOG_DUMP_LOADING1 \
( \
(FASTDVFS_GPU_EB_LOG_DUMP_LOADING1*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_LOADING2 \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_LOADING2*SYSRAM_LOG_SIZE)   \
)
#define SYSRAM_GPU_EB_LOG_DUMP_POWER_STATE \
( \
(FASTDVFS_GPU_EB_LOG_DUMP_POWER_STATE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_DEBUG_COUNT \
( \
(FASTDVFS_GPU_EB_LOG_DUMP_DEBUG_COUNT*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_SOC_TIMER_HI             \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_SOC_TIMER_HI*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_SOC_TIMER_LO             \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_SOC_TIMER_LO*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_GPU_TIME             \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_GPU_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_OPP \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_OPP*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_BOUND \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_BOUND*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_MARGIN \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_MARGIN*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_FB_MONITOR \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_FB_MONITOR*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_UN_TIME \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_UN_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_COM_TIME \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_COM_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_UN_TIME_TARGET \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_UN_TIME_TARGET*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_COM_TIME_TARGE \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_COM_TIME_TARGET*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_TIME_TARGET \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_TIME_TARGET*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_DELTA_TIME \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_DELTA_TIME*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_FB_TARGET \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_FB_TARGET*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_GPU \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_GPU*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_ITER \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_ITER*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_COMPUTE \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_COMPUTE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_L2EXT \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_L2EXT*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_IRQ \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_IRQ*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_MCU \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_MCU*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_INDEX1 \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_INDEX1*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_INDEX2 \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_INDEX2*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_LOG_DUMP_ASYNC_INDEX3 \
(\
(FASTDVFS_GPU_EB_LOG_DUMP_ASYNC_INDEX3*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_2K_SIZE \
(\
(FASTDVFS_GPU_EB_2K_SIZE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_ITER_U_MCU_LOADING					\
(\
(FASTDVFS_GPU_EB_USE_ITER_U_MCU_LOADING*SYSRAM_LOG_SIZE)		\
)
#define SYSRAM_GPU_EB_USE_GPU_LOADING					\
(\
(FASTDVFS_GPU_EB_USE_GPU_LOADING*SYSRAM_LOG_SIZE)		\
)
#define SYSRAM_GPU_EB_USE_MCU_LOADING					\
(\
(FASTDVFS_GPU_EB_USE_MCU_LOADING*SYSRAM_LOG_SIZE)		\
)
#define SYSRAM_GPU_EB_USE_ITER_LOADING					\
(\
(FASTDVFS_GPU_EB_USE_ITER_LOADING*SYSRAM_LOG_SIZE)		\
)
#define SYSRAM_GPU_EB_USE_DELTA_TIME					\
(\
(FASTDVFS_GPU_EB_USE_DELTA_TIME*SYSRAM_LOG_SIZE)		\
)
#define SYSRAM_GPU_EB_GED_KERNEL_COMMIT_OPP              \
(\
(FASTDVFS_GPU_EB_GED_KERNEL_COMMIT_OPP *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_GED_KERNEL_COMMIT_SOC_TIMER_LO                \
(\
(FASTDVFS_GPU_EB_GED_KERNEL_COMMIT_SOC_TIMER_LO*SYSRAM_LOG_SIZE)    \
)
#define SYSRAM_GPU_EB_GED_KERNEL_COMMIT_SOC_TIMER_HI              \
(\
(FASTDVFS_GPU_EB_GED_KERNEL_COMMIT_SOC_TIMER_HI*SYSRAM_LOG_SIZE)  \
)
#define SYSRAM_GPU_EB_GED_PRESERVE              \
(\
(FASTDVFS_GPU_EB_GED_PRESERVE*SYSRAM_LOG_SIZE)  \
)
#define SYSRAM_GPU_EB_LOADING_MODE             \
(													   \
(FASTDVFS_GPU_EB_LOADING_MODE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_P_MODE_STATUS             \
(													   \
(FASTDVFS_GPU_EB_P_MODE_STATUS*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_26M_REPLACE             \
(													   \
(FASTDVFS_GPU_EB_26M_REPLACE*SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_API_BOOST                        \
(													   \
(FASTDVFS_GPU_EB_API_BOOST*SYSRAM_LOG_SIZE)            \
)
#define SYSRAM_GPU_EB_ASYNC_PARAM                      \
(													   \
(FASTDVFS_GPU_EB_ASYNC_PARAM*SYSRAM_LOG_SIZE)          \
)
#define SYSRAM_GPU_EB_DCS_ENABLE                      \
(													   \
(FASTDVFS_GPU_EB_DCS_ENABLE*SYSRAM_LOG_SIZE)          \
)
#define SYSRAM_GPU_EB_USE_TARGET_GPU_HD				\
(\
(FASTDVFS_GPU_EB_USE_TARGET_GPU_HD*SYSRAM_LOG_SIZE)		  \
)
#define SYSRAM_GPU_EB_USE_POLICY_STATE              \
(\
(FASTDVFS_GPU_EB_USE_POLICY_STATE *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_T_GPU \
( \
(FASTDVFS_GPU_EB_USE_T_GPU *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_TARGET_OPP \
( \
(FASTDVFS_GPU_EB_USE_TARGET_OPP *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_TARGET_GPU \
( \
(FASTDVFS_GPU_EB_USE_TARGET_GPU *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_COMPLETE_GPU \
( \
(FASTDVFS_GPU_EB_USE_COMPLETE_GPU *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_UNCOMPOLETE_GPU \
( \
(FASTDVFS_GPU_EB_USE_UNCOMPOLETE_GPU *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_MARGIN \
( \
(FASTDVFS_GPU_EB_USE_MARGIN *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_MARGIN_CEIL \
( \
(FASTDVFS_GPU_EB_USE_MARGIN_CEIL *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_MARGIN_FLOOR \
( \
(FASTDVFS_GPU_EB_USE_MARGIN_FLOOR *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_BOUND_LOW \
( \
(FASTDVFS_GPU_EB_USE_BOUND_LOW *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_BOUND_HIGH \
( \
(FASTDVFS_GPU_EB_USE_BOUND_HIGH *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_BOUND_ULTRA_LOW \
( \
(FASTDVFS_GPU_EB_USE_BOUND_ULTRA_LOW *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_BOUND_ULTRA_HIGH \
( \
(FASTDVFS_GPU_EB_USE_BOUND_ULTRA_HIGH *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_LOADING \
( \
(FASTDVFS_GPU_EB_USE_LOADING *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_FB_OVERDUE_TIME \
( \
(FASTDVFS_GPU_EB_USE_FB_OVERDUE_TIME *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_DEBUG_COUNT \
( \
(FASTDVFS_GPU_EB_USE_DEBUG_COUNT *SYSRAM_LOG_SIZE) \
)
#define SYSRAM_GPU_EB_USE_APPLY_LB_ASYNC                \
(														\
(FASTDVFS_GPU_EB_USE_APPLY_LB_ASYNC *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_USE_MAX_IS_MCU                    \
(														\
(FASTDVFS_GPU_EB_USE_MAX_IS_MCU *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_AVG_MCU                       \
(														\
(FASTDVFS_GPU_EB_USE_AVG_MCU *SYSRAM_LOG_SIZE)	        \
)
#define SYSRAM_GPU_EB_USE_MAX_MCU                       \
(														\
(FASTDVFS_GPU_EB_USE_MAX_MCU *SYSRAM_LOG_SIZE)	        \
)
#define SYSRAM_GPU_EB_USE_AVG_MCU_TH                    \
(														\
(FASTDVFS_GPU_EB_USE_AVG_MCU_TH *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_MAX_MCU_TH                    \
(														\
(FASTDVFS_GPU_EB_USE_MAX_MCU_TH *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_ASYNC_GPU_ACTIVE              \
(														\
(FASTDVFS_GPU_EB_USE_ASYNC_GPU_ACTIVE *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_USE_ASYNC_ITER                 \
(														\
(FASTDVFS_GPU_EB_USE_ASYNC_ITER *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_ASYNC_COMPUTE                 \
(														\
(FASTDVFS_GPU_EB_USE_ASYNC_COMPUTE *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_USE_ASYNC_L2EXT                   \
(														\
(FASTDVFS_GPU_EB_USE_ASYNC_L2EXT *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_ASYNC_IRQ                     \
(														\
(FASTDVFS_GPU_EB_USE_ASYNC_IRQ *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_ASYNC_MCU                     \
(														\
(FASTDVFS_GPU_EB_USE_ASYNC_MCU *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_PERF_IMPROVE                  \
(														\
(FASTDVFS_GPU_EB_USE_PERF_IMPROVE *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_ADJUST_RATIO                  \
(														\
(FASTDVFS_GPU_EB_USE_ADJUST_RATIO *SYSRAM_LOG_SIZE)	    \
)
#define SYSRAM_GPU_EB_USE_ASYNC_OPP_DIFF                \
(														\
(FASTDVFS_GPU_EB_USE_ASYNC_OPP_DIFF *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_SMALL_FRAME                \
(														\
(FASTDVFS_GPU_EB_SMALL_FRAME *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_STABLE_LB                \
(														\
(FASTDVFS_GPU_EB_STABLE_LB *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_CMD_FALLBACK_INTERVAL                \
(														\
(FASTDVFS_GPU_EB_CMD_FALLBACK_INTERVAL *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_CMD_FALLBACK_WIN_SIZE                \
(														\
(FASTDVFS_GPU_EB_CMD_FALLBACK_WIN_SIZE *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_CMD_LB_DVFS_STEP                \
(														\
(FASTDVFS_GPU_EB_CMD_LOADING_BASE_DVFS_STEP *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_CMD_LOADING_STRIDE_SIZE                \
(														\
(FASTDVFS_GPU_EB_CMD_LOADING_STRIDE_SIZE *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_CMD_LOADING_WIN_SIZE                \
(														\
(FASTDVFS_GPU_EB_CMD_LOADING_WIN_SIZE *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_CMD_TB_DVFS_MARGIN                \
(														\
(FASTDVFS_GPU_EB_CMD_TIMER_BASE_DVFS_MARGIN *SYSRAM_LOG_SIZE)	\
)
#define SYSRAM_GPU_EB_LOG_DUMP_PREOC                \
(														\
(FASTDVFS_GPU_EB_LOG_DUMP_PREOC *SYSRAM_LOG_SIZE)	\
)

enum action_map {
	ACTION_MAP_FASTDVFS = 0,
	ACTION_MAP_FULLTRACE = 1,

	NR_ACTION_MAP
};

/**************************************************
 * GPU FAST DVFS IPI CMD
 **************************************************/

#define FASTDVFS_IPI_TIMEOUT 2000 //ms
#define FDVFS_REDUCE_IPI 1

enum {
	GPUFDVFS_IPI_SET_FRAME_DONE         = 1,
	GPUFDVFS_IPI_GET_BOUND              = 2,
	GPUFDVFS_IPI_SET_NEW_FREQ           = 3,
	GPUFDVFS_IPI_GET_MARGIM             = 4,
	GPUFDVFS_IPI_PMU_START              = 5,
	GPUFDVFS_IPI_SET_FRAME_BASE_DVFS    = 6,
	GPUFDVFS_IPI_SET_TARGET_FRAME_TIME  = 7,
	GPUFDVFS_IPI_SET_FEEDBACK_INFO      = 8,
	GPUFDVFS_IPI_SET_MODE               = 9,
	GPUFDVFS_IPI_GET_MODE               = 10,
	GPUFDVFS_IPI_SET_GED_READY          = 11,
	GPUFDVFS_IPI_SET_POWER_STATE        = 12,
	GPUFDVFS_IPI_SET_DVFS_STRESS_TEST   = 13,
	GPUFDVFS_IPI_SET_DVFS_REINIT        = 14,
	GPUFDVFS_IPI_GET_FB_TUNE_PARAM      = 15,
	GPUFDVFS_IPI_GET_LB_TUNE_PARAM      = 16,

	NR_GPUFDVFS_IPI,
};

/* IPI data structure */
struct fdvfs_ipi_data {
	unsigned int cmd;
	union {
		struct {
			unsigned int arg[5];
		} set_para;
	} u;
};


struct fdvfs_ipi_rcv_data {
	unsigned int cmd;
	union {
		struct {
			unsigned int arg[5];
		} set_para;
	} u;
};

/**************************************************
 * GPU FAST DVFS EVENT IPI
 **************************************************/
enum {
	GPUFDVFS_IPI_EVENT_CLK_CHANGE = 1,
	GPUFDVFS_IPI_EVENT_DEBUG_MODE_ON = 2,
	GPUFDVFS_IPI_EVENT_DEBUG_DATA = 3,

	NR_GPUFDVFS_IPI_EVENT_CMD,
};

struct GED_EB_EVENT {
	int cmd;
	unsigned int freq_new;
	struct work_struct sWork;
	bool bUsed;
};

struct fastdvfs_event_data {
	unsigned int cmd;
	union {
		struct {
		unsigned int arg[3];
		} set_para;
	} u;
};

/**************************************************
 * Definition
 **************************************************/
#define FDVFS_IPI_DATA_LEN \
	DIV_ROUND_UP(sizeof(struct fdvfs_ipi_data), MBOX_SLOT_SIZE)

#define POLICY_DISABLE      (0)
#define STRESS_TEST         (1)
#define POLICY_MODE         (2)
#define POLICY_DEBUG_FTRACE (4)
#define POLICY_DEBUG_MET    (8)
#define DEFAULT_POLICY      POLICY_MODE

extern void fdvfs_init(void);
extern void fdvfs_exit(void);
extern int ged_to_fdvfs_command(unsigned int cmd,
	struct fdvfs_ipi_data *fdvfs_d);
extern int mtk_gpueb_sysram_read(int offset);
extern int mtk_gpueb_sysram_write(int offset, int value);

/**************************************************
 * GPU FAST DVFS EXPORTED API
 **************************************************/
extern int mtk_gpueb_dvfs_set_frame_done(void);
extern unsigned int mtk_gpueb_dvfs_get_cur_freq(void);
extern unsigned int mtk_gpueb_dvfs_get_frame_loading(void);
extern void mtk_gpueb_dvfs_commit(unsigned long ui32NewFreqID,
		GED_DVFS_COMMIT_TYPE eCommitType, int *pbCommited);
extern void mtk_gpueb_dvfs_dcs_commit(unsigned int platform_freq_idx,
		GED_DVFS_COMMIT_TYPE eCommitType, unsigned int virtual_freq_in_MHz);
extern unsigned int mtk_gpueb_dvfs_set_frame_base_dvfs(unsigned int enable);
extern int mtk_gpueb_dvfs_set_taget_frame_time(unsigned int target_frame_time,
		unsigned int target_margin);
extern unsigned int
	mtk_gpueb_dvfs_set_feedback_info(int frag_done_interval_in_ns,
	struct GpuUtilization_Ex util_ex, unsigned int curr_fps);
extern unsigned int mtk_gpueb_dvfs_set_mode(unsigned int action);
extern void mtk_gpueb_dvfs_get_mode(struct fdvfs_ipi_data *ipi_data);

unsigned int mtk_gpueb_set_fallback_mode(int fallback_status);
unsigned int mtk_gpueb_set_stability_mode(int stability_status);
void mtk_gpueb_dvfs_get_desire_freq(unsigned long *ui32NewFreqID);
void mtk_gpueb_dvfs_get_desire_freq_dual(unsigned long *stackNewFreqID,
	unsigned long *topNewFreqID);
extern unsigned int is_fdvfs_enable(void);
extern int mtk_gpueb_power_modle_cmd(unsigned int enable);
extern void mtk_swpm_gpu_pm_start(void);
extern int mtk_set_ged_ready(int ged_ready_flag);
/* DVFS IPI */
void mtk_gpueb_set_power_state(enum ged_gpu_power_state power_state);
u64 mtk_gpueb_read_soc_timer(void);
void mtk_gpueb_record_soc_timer(u64 soc_timer);


extern int fastdvfs_proc_init(void);
extern void fastdvfs_proc_exit(void);

#define GPUEB_SYSRAM_DVFS_DEBUG_BUF_READ_OFF 700
#define GPUEB_SYSRAM_GPU_DBG_TEST_BUF_OFF    (GPUEB_SYSRAM_DVFS_DEBUG_BUF_READ_OFF + sizeof(unsigned int))
#define GPUEB_SYSRAM_GPU_DBG_TEST_BUF_SZ     256
#define GPUEB_SYSRAM_DVFS_DEBUG_COUNT        8
#define GPUEB_SYSRAM_DVFS_DEBUG_BUF_SIZE     10

enum ged_eb_dvfs_debug_index {
	EB_COMMIT_TYPE,
	EB_FREQ,
	EB_LOADING,
	EB_AVG_LOADING,
	EB_POWER_STATE,
	EB_DEBUG_COUNT,
	EB_GPU_TIME,
	EB_OPP,
	EB_BOUND,
	EB_MARGIN,
	EB_FB_MONITOR,
	EB_PRESERV,
	EB_ASYNC_COUNTER,
	EB_ASYNC_MCU_INDEX,
	EB_ASYNC_POLICY,
	EB_PREOC,
	EB_MAX_COUNT,
};

enum ged_eb_dvfs_task_index {
	EB_UPDATE_UNCOMPLETE_COUNT,
	EB_UPDATE_POLICY_STATE,
	EB_COMMIT_DCS,
	EB_UPDATE_GPU_TIME_INFO,
	EB_UPDATE_UNCOMPLETE_GPU_TIME,
	EB_UPDATE_FB_TARGET_TIME,
	EB_UPDATE_FB_TARGET_TIME_DONE,
	EB_SET_FTRACE,
	EB_COMMIT_LAST_KERNEL_OPP,
	EB_UPDATE_PRESERVE,
	EB_DCS_ENABLE,
	EB_DCS_CORE_NUM,
	EB_ASYNC_RATIO_ENABLE,
	EB_ASYNC_PARAM,
	EB_UPDATE_API_BOOST,
	EB_REINIT,
	EB_UPDATE_SMALL_FRAME,
	EB_UPDATE_STABLE_LB,
	EB_UPDATE_DESIRE_FREQ_ID,
	EB_UPDATE_LAST_COMMIT_IDX,
	EB_UPDATE_LAST_COMMIT_TOP_IDX,
	EB_DBG_CMD,
	EB_MAX_INDEX,
};

enum ged_eb_soc_udpate_point {
	SOC_RESET,
	SOC_DEQUEUE,
	SOC_QUEUE,
	SOC_DONE,
	SOC_FB,
	SOC_PREFENCE,
	SOC_MAX_NUM,
};


int ged_eb_dvfs_task(enum ged_eb_dvfs_task_index index, int flag);
void ged_notify_eb_ged_ready(void);

static struct {
	const char *name;
	enum ged_eb_dvfs_debug_index dbg_index;
	unsigned int sysram_base;
} gpueb_dbg_data[] = {
	{"commit_type", EB_COMMIT_TYPE, SYSRAM_GPU_EB_LOG_DUMP_OPP},
	{"freq", EB_FREQ, SYSRAM_GPU_EB_LOG_DUMP_TOP_FREQ},
	{"loading", EB_LOADING, SYSRAM_GPU_EB_LOG_DUMP_LOADING1},
	{"loading_avg", EB_AVG_LOADING, SYSRAM_GPU_EB_LOG_DUMP_LOADING1},
	{"power_state", EB_POWER_STATE, SYSRAM_GPU_EB_LOG_DUMP_POWER_STATE},
	{"debug_count", EB_DEBUG_COUNT, SYSRAM_GPU_EB_LOG_DUMP_DEBUG_COUNT},
	{"gpu_time", EB_GPU_TIME, SYSRAM_GPU_EB_LOG_DUMP_OPP},
	{"opp", EB_OPP, SYSRAM_GPU_EB_LOG_DUMP_OPP},
	{"bound", EB_BOUND, SYSRAM_GPU_EB_LOG_DUMP_BOUND},
	{"margin", EB_MARGIN, SYSRAM_GPU_EB_LOG_DUMP_MARGIN},
	{"fb_monitor", EB_FB_MONITOR, SYSRAM_GPU_EB_LOG_DUMP_FB_MONITOR},
	{"preserv", EB_PRESERV, SYSRAM_GPU_EB_LOG_DUMP_POWER_STATE},
	{"async_counter", EB_ASYNC_COUNTER, SYSRAM_GPU_EB_LOG_DUMP_ASYNC_GPU},
	{"async_mcu_index", EB_ASYNC_MCU_INDEX, SYSRAM_GPU_EB_LOG_DUMP_ASYNC_INDEX1},
	{"async_policy", EB_ASYNC_POLICY, SYSRAM_GPU_EB_LOG_DUMP_ASYNC_INDEX2},
	{"preoc", EB_PREOC, SYSRAM_GPU_EB_LOG_DUMP_PREOC},

};


#endif // __GED_EB_H__
