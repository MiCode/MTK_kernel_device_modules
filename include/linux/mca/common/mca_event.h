/* SPDX-License-Identifier: GPL-2.0 */
/*
 * mca_event.h
 *
 * mca event driver
 *
 * Copyright (c) 2023-2023 Xiaomi Technologies Co., Ltd.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 */
#ifndef __MCA_EVENT_NE_H__
#define __MCA_EVENT_NE_H__

#include <linux/notifier.h>
#include <linux/kobject.h>

#define MCA_EVENT_WR_BUF_SIZE 128
#define MCA_EVENT_NOTIFY_SIZE 128

struct mca_event_notify_data {
	const char *event;
	int event_len;
};

enum mca_event_notify_type {
	MCA_EVENT_TYPE_BEGIN = 0,
	MCA_EVENT_TYPE_CHARGER_CONNECT = MCA_EVENT_TYPE_BEGIN,
	MCA_EVENT_TYPE_CHARGE_TYPE,
	MCA_EVENT_TYPE_BATTERY_INFO,
	MCA_EVENT_TYPE_CP_INFO,
	MCA_EVENT_TYPE_HW_INFO,
	MCA_EVENT_CHARGE_STATUS,
	MCA_EVENT_TYPE_THERMAL_TEMP,
	MCA_EVENT_TYPE_PANEL,
	MCA_EVENT_TYPE_TYPEC_PORT_STATUS,
	MCA_EVENT_TYPE_END,
};

enum mca_event_notify_list {
	MCA_EVENT_BEGIN = 0,
	/* CHARGER_CONNECT */
	MCA_EVENT_USB_DISCONNECT = MCA_EVENT_BEGIN,
	MCA_EVENT_USB_CONNECT,
	MCA_EVENT_WIRELESS_DISCONNECT,
	MCA_EVENT_WIRELESS_CONNECT,
	MCA_EVENT_WIRELESS_REVCHG,
	/* CHARGE_TYPE */
	MCA_EVENT_CHARGE_TYPE_CHANGE,
	MCA_EVENT_CHARGE_CAP_CHANGE,
	MCA_EVENT_CHARGE_VERIFY_PROCESS_END,
	/* WIRELESS_INT */
	MCA_EVENT_WIRELESS_INT_CHANGE,
	MCA_EVENT_WIRELESS_SW_SET_QC_ICHG,
	MCA_EVENT_WIRELESS_SW_SET_THERMAL_ICHG,
	MCA_EVENT_WIRELESS_WLS_DEBUG,
	MCA_EVENT_WIRELESS_EPP_MODE,
	MCA_EVENT_WIRELESS_MAGNETIC_QUIT_QC,
	MCA_EVENT_WIRELESS_AUDIO_PHONE_STS,
	MCA_EVENT_WIRELESS_THERMAL_PHONE_FLAG,
	/* BATTERY_INFO */
	MCA_EVENT_BATTERY_STS_CHANGE,
	MCA_EVENT_BATTERY_FAKE_POWER,
	MCA_EVENT_BATTERY_HEALTH_CHANGE,
	/* CP INFO */
	MCA_EVENT_CP_VUSB_INSERT,
	MCA_EVENT_CP_VUSB_OUT,
	MCA_EVENT_CP_VUSB_OVP,
	MCA_EVENT_CP_VBAT_OVP,
	MCA_EVENT_CP_VBUS_OVP,
	MCA_EVENT_CP_VWPC_OVP,
	MCA_EVENT_CP_PMID2OUT_OVP,
	MCA_EVENT_CP_PMID2OUT_UVP,
	MCA_EVENT_CP_IBAT_OCP,
	MCA_EVENT_CP_IBUS_OCP,
	MCA_EVENT_CP_IBUS_UCP,
	MCA_EVENT_CP_CBOOT_FAIL,
	MCA_EVENT_CP_VOUT_UVLO,
	MCA_EVENT_CP_POR_FLAG,
	MCA_EVENT_CP_IIC_ERROR,
	MCA_EVENT_CP_TSHUT_FLAG,
	/* HW_INFO */
	MCA_EVENT_CONN_ANTIBURN_CHANGE,
	MCA_EVENT_BATT_BTB_CHANGE,
	MCA_EVENT_BATT_AUTH_PASS,
	MCA_EVENT_LPD_STATUS_CHANGE,
	MCA_EVENT_PMIC_INIT_DONE,
	MCA_EVENT_CC_SHORT_VBUS,
	MCA_EVENT_VBAT_OVP_CHANGE,
	MCA_EVENT_CP_REVERT_CHANGE,
	/* CHARGE_STATUS */
	MCA_EVENT_USB_STS_CHANGE,
	MCA_EVENT_CHARGE_ABNORMAL,
	MCA_EVENT_CHARGE_RESTORE,
	MCA_EVENT_SOC_LIMIT,
	MCA_EVENT_BATTERY_DTPT,
	MCA_EVENT_CSD_SEND_PULSE,
	MCA_EVENT_PPS_PTF,
	MCA_EVENT_IS_EU_MODEL,
	MCA_EVENT_PLATE_SHOCK,
	/* THERMAL BOARD*/
	MCA_EVENT_THERMAL_BOARD_TEMP_CHANGE,
	MCA_EVENT_CHARGE_RECHARGE_CHECK,
	MCA_EVENT_PANEL_SCREEN_STATE_CHANGE,
	MCA_EVENT_PANEL_HBM_STATE_CHANGE,
	/* TYPEC PORT STATYS */
	MCA_EVENT_TYPEC_PORT_CHANGE,
	/* BQ FG ERROR */
	MCA_EVENT_BQ_FG_ERROR,
	/* OHTER EVENT */
	MCA_EVENT_CHARGE_ACTION,
	MCA_EVENT_SINK_PWR_SUSPEND_CHANGE,
	MCA_EVENT_USB_SUSPEND,
	MCA_EVENT_MAX,
};

enum MCA_BATT_CHGR_STATUS_TYPE {
	MCA_BATT_CHGR_STATUS_INHIBIT,
	MCA_BATT_CHGR_STATUS_TRICKLE,
	MCA_BATT_CHGR_STATUS_PRECHARGE,
	MCA_BATT_CHGR_STATUS_FULLON,
	MCA_BATT_CHGR_STATUS_TAPER,
	MCA_BATT_CHGR_STATUS_TERMINATION,
	MCA_BATT_CHGR_STATUS_PAUSE,
	MCA_BATT_CHGR_STATUS_CHARGING_DISABLED,
	MCA_BATT_CHGR_STATUS_FAST_LINEAR,
};

int mca_event_block_notify_register(unsigned int type, struct notifier_block *nb);
int mca_event_block_notify_unregister(unsigned int type, struct notifier_block *nb);
void mca_event_block_notify(unsigned int type, unsigned long event, void *data);
void mca_event_report_uevent(const struct mca_event_notify_data *n_data);

#endif /* __MCA_EVENT_H__ */
