/* SPDX-License-Identifier: GPL-2.0 */
/*
 * mca_dfx_event.h
 *
 * mca charge mievent driver
 *
 * Copyright (c) 2024-2024 Xiaomi Technologies Co., Ltd.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 */
#ifndef __MCA_CHARGE_MIEVENT_H__
#define __MCA_CHARGE_MIEVENT_H__

#include <linux/ktime.h>

#define CHARGE_MIEVENT_MAX_PARA_NUM 16
#define CHARGE_MIEVENT_PARA_NAME_LEN 30
#define MIEVENT_STRING_MAX_LEN 128

enum charge_mievent_type_num_ele {
	MIEVENT_CODE_PD_AUTH_FAILED = 909001004,
	MIEVENT_CODE_CP_OPEN_FAILED = 909001005,
	MIEVENT_CODE_NON_STANDARD_ADAPTER = 909002001,
	MIEVENT_CODE_RP_SHORT_VBUS_DETECTED = 909002002,
	MIEVENT_CODE_LPD_DETECTED = 909002003,
	MIEVENT_CODE_CP_VBUS_OVP = 909002004,
	MIEVENT_CODE_CP_IBUS_OCP = 909002005,
	MIEVENT_CODE_CP_VBAT_OVP = 909002006,
	MIEVENT_CODE_CP_IBAT_OCP = 909002007,
	MIEVENT_CODE_CP_VAC_OVP = 909002008,
	MIEVENT_CODE_ANTI_BURN_TRIGGERED = 909002012,
	MIEVENT_CODE_BATTERY_CYCLECOUNT = 909003001,
	MIEVENT_CODE_SOC_NOT_FULL = 909003002,
	MIEVENT_CODE_SMART_ENDURANCE_TRIGGERED = 909003004,
	MIEVENT_CODE_SMART_NAVIGATION_TRIGGERED = 909003006,
	MIEVENT_CODE_FG_IIC_ERR = 909005001,
	MIEVENT_CODE_CP_ABSENT = 909005002,
	MIEVENT_CODE_BATTERY_MISSING = 909005003,
	MIEVENT_CODE_CP_TDIE_HOT = 909005004,
	MIEVENT_CODE_VBUS_UVLO = 909005005,
	MIEVENT_CODE_LOW_TEMP_DISCHARGING = 909005007,
	MIEVENT_CODE_HIGH_TEMP_DISCHARGING = 909005008,
	MIEVENT_CODE_DUAL_BATTERY_MISSING = 909005009,
	MIEVENT_CODE_VBATT_SOC_NOT_MATCH = 909006001,
	MIEVENT_CODE_SMART_ENDURANCE_SOC_ERR = 909006010,
	MIEVENT_CODE_SMART_NAVIGATION_SOC_ERR = 909006011,
	MIEVENT_CODE_BATTERY_AUTH_FAIL = 909007001,
	MIEVENT_CODE_DUAL_BATTERY_AUTH_FAIL = 909007002,
	MIEVENT_CODE_LOAD_SWITCH_I2C_ERR = 909007003,
	MIEVENT_CODE_BATTERY_TEMP_HOT =  909009001,
	MIEVENT_CODE_BATTERY_TEMP_COLD = 909009002,
	MIEVENT_CODE_ANTIBURN_ERR = 909009003,
	MIEVENT_CODE_WLS_FASTCHG_FAIL = 909011001,
	MIEVENT_CODE_WLS_FOD_LOW_POWER = 909011002,
	MIEVENT_CODE_WLS_MAGNETIC_CASE_ATTACH = 909011003,
	MIEVENT_CODE_WLS_RX_OTP = 909012001,
	MIEVENT_CODE_WLS_RX_OVP = 909012002,
	MIEVENT_CODE_WLS_RX_OCP = 909012003,
	MIEVENT_CODE_WLS_TRX_FOD = 909012004,
	MIEVENT_CODE_WLS_TRX_OCP = 909012005,
	MIEVENT_CODE_WLS_TRX_UVLO = 909012006,
	MIEVENT_CODE_WLS_TRX_IIC_ERR = 909013001,
	MIEVENT_CODE_WLS_FW_UPGRADE_FAIL = 909013002,
	MIEVENT_CODE_WLS_RX_IIC_ERR = 909013004,
	MIEVENT_CODE_BATTERY_VOLTAGE_DIFFER = 909014002,
};

enum charge_mievent_type_index {
	/* charger mievent upload type for plug*/
	CHARGE_DFX_PD_AUTH_FAILED = 0,
	CHARGE_DFX_CP_OPEN_FAILED,
	CHARGE_DFX_NOT_STANDARD_ADAPTER,
	CHARGE_DFX_RP_SHORT_VBUS_DETECTED,
	CHARGE_DFX_LPD_DETECTED,
	CHARGE_DFX_CP_VBUS_OVP,
	CHARGE_DFX_CP_IBUS_OCP,
	CHARGE_DFX_CP_VBAT_OVP,
	CHARGE_DFX_CP_IBAT_OCP,
	CHARGE_DFX_CP_VAC_OVP,
	CHARGE_DFX_ANTI_BURN_TRIGGERED,
	CHARGE_DFX_SOC_NOT_FULL,
	CHARGE_DFX_SMART_ENDURANCE_TRIGGERED,
	CHARGE_DFX_SMART_NAVIGATION_TRIGGERED,
	CHARGE_DFX_BATTERY_MISSING,
	CHARGE_DFX_CP_TDIE_HOT,
	CHARGE_DFX_VBUS_UVLO,
	CHARGE_DFX_LOW_TEMP_DISCHARGING,
	CHARGE_DFX_HIGH_TEMP_DISCHARGING,
	CHARGE_DFX_DUAL_BATTERY_MISSING,
	CHARGE_DFX_SMART_ENDURANCE_SOC_ERR,
	CHARGE_DFX_SMART_NAVIGATION_SOC_ERR,
	CHARGE_DFX_BATTERY_AUTH_FAIL,
	CHARGE_DFX_DUAL_BATTERY_AUTH_FAIL,
	CHARGE_DFX_ANTIBURN_ERR,
	CHARGE_DFX_WLS_FASTCHG_FAIL,
	CHARGE_DFX_WLS_FOD_LOW_POWER,
	CHARGE_DFX_WLS_RX_OTP,
	CHARGE_DFX_WLS_RX_OVP,
	CHARGE_DFX_WLS_RX_OCP,
	CHARGE_DFX_WLS_TRX_FOD,
	CHARGE_DFX_WLS_TRX_OCP,
	CHARGE_DFX_WLS_TRX_UVLO,
	CHARGE_DFX_WLS_TRX_IIC_ERR,
	CHARGE_DFX_WLS_RX_IIC_ERR,
	CHARGE_DFX_LOAD_SWITCH_I2C_ERR,
	CHARGE_DFX_WLS_FW_UPGRADE_FAIL,
	/* charger mievent upload type for time*/
	CHARGE_DFX_BATTERY_CYCLECOUNT,
	CHARGE_DFX_FG_IIC_ERR,
	CHARGE_DFX_CP_ABSENT,
	CHARGE_DFX_VBATT_SOC_NOT_MATCH,
	CHARGE_DFX_BATTERY_TEMP_HOT,
	CHARGE_DFX_BATTERY_TEMP_COLD,
	CHARGE_DFX_BATTERY_VOLTAGE_DIFFER,
	CHARGE_DFX_WLS_MAGNETIC_CASE_ATTACH,
	CHARGE_DFX_MAX_NUM,
};

enum charge_mievent_state_ele {
	MIEVENT_STATE_PLUG,
	MIEVENT_STATE_END,
	MIEVENT_STATE_MAX,
};

enum charge_mievent_upload_type_ele {
	MIEVENT_UPLOAD_TYPE_PLUG = 0,
	MIEVENT_UPLOAD_TYPE_TIME,
	MIEVENT_UPLOAD_TYPE_MAX,
};

enum mievent_upload_type_plug_ele{
	PLUG_TYPE_PD_AUTH_FAILED = 0,
	PLUG_TYPE_CP_OPEN_FAILED,
	PLUG_TYPE_NOT_STANDARD_ADAPTER,
	PLUG_TYPE_RP_SHORT_VBUS_DETECTED,
	PLUG_TYPE_LPD_DETECTED,
	PLUG_TYPE_CP_VBUS_OVP,
	PLUG_TYPE_CP_IBUS_OCP,
	PLUG_TYPE_CP_VBAT_OVP,
	PLUG_TYPE_CP_IBAT_OCP,
	PLUG_TYPE_CP_VAC_OVP,
	PLUG_TYPE_ANTI_BURN_TRIGGERED,
	PLUG_TYPE_SOC_NOT_FULL,
	PLUG_TYPE_SMART_ENDURANCE_TRIGGERED,
	PLUG_TYPE_SMART_NAVIGATION_TRIGGERED,
	PLUG_TYPE_BATTERY_MISSING,
	PLUG_TYPE_CP_TDIE_HOT,
	PLUG_TYPE_VBUS_UVLO,
	PLUG_TYPE_LOW_TEMP_DISCHARGING,
	PLUG_TYPE_HIGH_TEMP_DISCHARGING,
	PLUG_TYPE_DUAL_BATTERY_MISSING,
	PLUG_TYPE_SMART_ENDURANCE_SOC_ERR,
	PLUG_TYPE_SMART_NAVIGATION_SOC_ERR,
	PLUG_TYPE_BATTERY_AUTH_FAIL,
	PLUG_TYPE_DUAL_BATTERY_AUTH_FAIL,
	PLUG_TYPE_ANTIBURN_ERR,
	PLUG_TYPE_WLS_FASTCHG_FAIL,
	PLUG_TYPE_WLS_FOD_LOW_POWER,
	PLUG_TYPE_WLS_RX_OTP,
	PLUG_TYPE_WLS_RX_OVP,
	PLUG_TYPE_WLS_RX_OCP,
	PLUG_TYPE_WLS_TRX_FOD,
	PLUG_TYPE_WLS_TRX_OCP,
	PLUG_TYPE_WLS_TRX_UVLO,
	PLUG_TYPE_WLS_TRX_IIC_ERR,
	PLUG_TYPE_WLS_RX_IIC_ERR,
	PLUG_TYPE_LOAD_SWITCH_I2C_ERR,
	PLUG_TYPE_WLS_FW_UPGRADE_FAIL,
	PLUG_TYPE_MAX_NUM,
};

#define DEFAULT_MAX_COUNT 1
#define LEVEL0_MAX_REPORT_COUNT	3
#define LEVEL1_MAX_REPORT_COUNT	5

struct mievent_upload_type_plug {
	int max_count;
	int count;
};

#define BATTERY_CYCLECOUNT_TIMER_S 1440
#define FG_IIC_ERR_TIMER_S	60
#define CP_IIC_ERR_TIMER_S	60
#define VBATT_SOC_NOT_MATCH_S 10
#define BATTERY_TEMP_HOT_TIMER_S	10
#define BATTERY_TEMP_COLD_TIMER_S	10
#define BATTERY_VOLTAGE_DIFFER_TIMER_S 1

#define BLOCK_TIMER_S 300		//5 MIN
#define CRITICAL_TIMER_S 600   //10 MIN
#define MAJOR_TIMER_S 3600    //1 HOUR
#define MINOR_TIMER_S 604800 //7 DAIYS

enum cp_i2c_err_ele{
	CP_IIC_ERROR_PARAM_MASTER,
	CP_IIC_ERROR_PARAM_SLAVE,
	CP_IIC_ERROR_PARAM_MAX,
};

enum mievent_upload_type_time_ele{
	TIME_TYPE_BATTERY_CYCLECOUNT = 0,
	TIME_TYPE_FG_IIC_ERR,
	TIME_TYPE_CP_ABSENT,
	TIME_TYPE_VBATT_SOC_NOT_MATCH,
	TIME_TYPE_BATTERY_TEMP_HOT,
	TIME_TYPE_BATTERY_TEMP_COLD,
	TIME_TYPE_BATTERY_VOLTAGE_DIFFER,
	TIME_TYPE_WLS_MAGNETIC_CASE_ATTACH,
	TIME_TYPE_MAX_NUM,
};
struct mievent_upload_type_time {
	time64_t time_last;
	int time_interval;
	int count;
};

enum charge_mievent_data_type_ele {
	MIEVENT_DATA_TYPE_INT,
	MIEVENT_DATA_TYPE_STRING,
	MIEVENT_DATA_TYPE_NULL,
	MIEVENT_DATA_TYPE_MAX,
};

struct charge_mievent_info {
	int event_code;
	const char event_type[CHARGE_MIEVENT_PARA_NAME_LEN];
	const char event_describe[CHARGE_MIEVENT_PARA_NAME_LEN];
	int upload_type;
	int type_index;
	int data_type;
	int data_count;
	const char para_name[CHARGE_MIEVENT_MAX_PARA_NUM][CHARGE_MIEVENT_PARA_NAME_LEN];
};

void mca_charge_mievent_report(int event_index, void *data, int size);
void mca_charge_mievent_set_state(enum charge_mievent_state_ele state, int value);


#endif /* __MCA_CHARGE_MIEVENT_H__ */
